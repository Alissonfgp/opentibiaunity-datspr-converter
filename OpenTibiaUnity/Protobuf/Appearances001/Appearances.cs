// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: opentibia.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenTibiaUnity.Protobuf.Appearances001
{

    /// <summary>Holder for reflection information generated from opentibia.proto</summary>
    public static partial class OpentibiaReflection
    {

        #region Descriptor
        /// <summary>File descriptor for opentibia.proto</summary>
        public static pbr::FileDescriptor Descriptor {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static OpentibiaReflection() {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg9vcGVudGliaWEucHJvdG8SJm9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFw",
                  "cGVhcmFuY2UwMDAxIqECCgtBcHBlYXJhbmNlcxJDCgdvYmplY3RzGAEgAygL",
                  "MjIub3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZTAwMDEuQXBw",
                  "ZWFyYW5jZRJDCgdvdXRmaXRzGAIgAygLMjIub3BlblRpYmlhVW5pdHkuUHJv",
                  "dG9idWYuQXBwZWFyYW5jZTAwMDEuQXBwZWFyYW5jZRJDCgdlZmZlY3RzGAMg",
                  "AygLMjIub3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZTAwMDEu",
                  "QXBwZWFyYW5jZRJDCgdtaXNzbGVzGAQgAygLMjIub3BlblRpYmlhVW5pdHku",
                  "UHJvdG9idWYuQXBwZWFyYW5jZTAwMDEuQXBwZWFyYW5jZSKpAQoKQXBwZWFy",
                  "YW5jZRIKCgJpZBgBIAEoDRJGCgVmbGFncxgCIAEoCzI3Lm9wZW5UaWJpYVVu",
                  "aXR5LlByb3RvYnVmLkFwcGVhcmFuY2UwMDAxLkFwcGVhcmFuY2VGbGFncxJH",
                  "CgtmcmFtZUdyb3VwcxgDIAMoCzIyLm9wZW5UaWJpYVVuaXR5LlByb3RvYnVm",
                  "LkFwcGVhcmFuY2UwMDAxLkZyYW1lR3JvdXAirgcKD0FwcGVhcmFuY2VGbGFn",
                  "cxIOCgZncm91bmQYASABKA0SFAoMZ3JvdW5kQm9yZGVyGAIgASgIEhAKCG9u",
                  "Qm90dG9tGAMgASgIEg0KBW9uVG9wGAQgASgIEhEKCWNvbnRhaW5lchgFIAEo",
                  "CBIRCglzdGFja2FibGUYBiABKAgSEAoIZm9yY2VVc2UYByABKAgSEAoIbXVs",
                  "dGlVc2UYCCABKAgSEAoId3JpdGFibGUYCSABKA0SFAoMd3JpdGFibGVPbmNl",
                  "GAogASgNEhYKDmZsdWlkQ29udGFpbmVyGAsgASgIEg4KBnNwbGFzaBgMIAEo",
                  "CBITCgtub3RXYWxrYWJsZRgNIAEoCBITCgtub3RNb3ZlYWJsZRgOIAEoCBIX",
                  "Cg9ibG9ja1Byb2plY3RpbGUYDyABKAgSEwoLbm90UGF0aGFibGUYECABKAgS",
                  "FwoPbm9Nb3ZlQW5pbWF0aW9uGBEgASgIEhIKCnBpY2t1cGFibGUYEiABKAgS",
                  "EAoIaGFuZ2FibGUYEyABKAgSEQoJaG9va1NvdXRoGBQgASgIEhAKCGhvb2tF",
                  "YXN0GBUgASgIEhIKCnJvdGF0ZWFibGUYFiABKAgSQAoFbGlnaHQYFyABKAsy",
                  "MS5vcGVuVGliaWFVbml0eS5Qcm90b2J1Zi5BcHBlYXJhbmNlMDAwMS5MaWdo",
                  "dEluZm8SEAoIZG9udEhpZGUYGCABKAgSEwoLdHJhbnNsdWNlbnQYGSABKAgS",
                  "RQoMZGlzcGxhY2VtZW50GBogASgLMi8ub3BlblRpYmlhVW5pdHkuUHJvdG9i",
                  "dWYuQXBwZWFyYW5jZTAwMDEuVmVjdG9yMhIRCgllbGV2YXRpb24YGyABKA0S",
                  "EwoLbHlpbmdDb3Jwc2UYHCABKAgSFQoNYW5pbWF0ZUFsd2F5cxgdIAEoCBIU",
                  "CgxtaW5pbWFwQ29sb3IYHiABKA0SEAoIbGVuc0hlbHAYHyABKA0SEgoKZnVs",
                  "bEdyb3VuZBggIAEoCBIMCgRMb29rGCEgASgIEg0KBWNsb3RoGCIgASgNEkIK",
                  "Bm1hcmtldBgjIAEoCzIyLm9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFwcGVh",
                  "cmFuY2UwMDAxLk1hcmtldEluZm8SFQoNZGVmYXVsdEFjdGlvbhgkIAEoDRIQ",
                  "Cgh3cmFwYWJsZRglIAEoCBISCgp1bldyYXBhYmxlGCYgASgIEhEKCXRvcEVm",
                  "ZmVjdBgnIAEoCBIOCgZ1c2FibGUYKCABKAgiLQoJTGlnaHRJbmZvEhEKCWlu",
                  "dGVuc2l0eRgBIAEoDRINCgVjb2xvchgCIAEoDSIfCgdWZWN0b3IyEgkKAXgY",
                  "ASABKA0SCQoBeRgCIAEoDSJ+CgpNYXJrZXRJbmZvEhAKCGNhdGVnb3J5GAEg",
                  "ASgNEg8KB3RyYWRlQXMYAiABKA0SDgoGc2hvd0FzGAMgASgNEgwKBG5hbWUY",
                  "BCABKAkSGAoQcmVzdHJpY3RWb2NhdGlvbhgFIAEoDRIVCg1yZXF1aXJlZExl",
                  "dmVsGAYgASgNIsgCCgpGcmFtZUdyb3VwEkQKBHR5cGUYASABKA4yNi5vcGVu",
                  "VGliaWFVbml0eS5Qcm90b2J1Zi5BcHBlYXJhbmNlMDAwMS5GcmFtZUdyb3Vw",
                  "VHlwZRINCgV3aWR0aBgCIAEoDRIOCgZoZWlnaHQYAyABKA0SEQoJZXhhY3RT",
                  "aXplGAQgASgNEg4KBmxheWVycxgFIAEoDRIUCgxwYXR0ZXJuV2lkdGgYBiAB",
                  "KA0SFQoNcGF0dGVybkhlaWdodBgHIAEoDRIUCgxwYXR0ZXJuRGVwdGgYCCAB",
                  "KA0SDgoGcGhhc2VzGAkgASgNEk4KDmZyYW1lQW5pbWF0aW9uGAogASgLMjYu",
                  "b3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZTAwMDEuRnJhbWVB",
                  "bmltYXRpb24SDwoHc3ByaXRlcxgLIAMoDSKfAQoORnJhbWVBbmltYXRpb24S",
                  "DQoFYXN5bmMYASABKAgSEQoJbG9vcENvdW50GAIgASgFEhIKCnN0YXJ0UGhh",
                  "c2UYAyABKAUSVwoTZnJhbWVHcm91cER1cmF0aW9ucxgEIAMoCzI6Lm9wZW5U",
                  "aWJpYVVuaXR5LlByb3RvYnVmLkFwcGVhcmFuY2UwMDAxLkZyYW1lR3JvdXBE",
                  "dXJhdGlvbiIuChJGcmFtZUdyb3VwRHVyYXRpb24SCwoDbWluGAEgASgNEgsK",
                  "A21heBgCIAEoDSpFCg5GcmFtZUdyb3VwVHlwZRIXChNGcmFtZUdyb3VwVHlw",
                  "ZV9JZGxlEAASGgoWRnJhbWVHcm91cFR5cGVfV2Fsa2luZxABYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.Appearances), global::OpenTibiaUnity.Protobuf.Appearances001.Appearances.Parser, new[]{ "Objects", "Outfits", "Effects", "Missles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.Appearance), global::OpenTibiaUnity.Protobuf.Appearances001.Appearance.Parser, new[]{ "Id", "Flags", "FrameGroups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.AppearanceFlags), global::OpenTibiaUnity.Protobuf.Appearances001.AppearanceFlags.Parser, new[]{ "Ground", "GroundBorder", "OnBottom", "OnTop", "Container", "Stackable", "ForceUse", "MultiUse", "Writable", "WritableOnce", "FluidContainer", "Splash", "NotWalkable", "NotMoveable", "BlockProjectile", "NotPathable", "NoMoveAnimation", "Pickupable", "Hangable", "HookSouth", "HookEast", "Rotateable", "Light", "DontHide", "Translucent", "Displacement", "Elevation", "LyingCorpse", "AnimateAlways", "MinimapColor", "LensHelp", "FullGround", "Look", "Cloth", "Market", "DefaultAction", "Wrapable", "UnWrapable", "TopEffect", "Usable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.LightInfo), global::OpenTibiaUnity.Protobuf.Appearances001.LightInfo.Parser, new[]{ "Intensity", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.Vector2), global::OpenTibiaUnity.Protobuf.Appearances001.Vector2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.MarketInfo), global::OpenTibiaUnity.Protobuf.Appearances001.MarketInfo.Parser, new[]{ "Category", "TradeAs", "ShowAs", "Name", "RestrictVocation", "RequiredLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup), global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup.Parser, new[]{ "Type", "Width", "Height", "ExactSize", "Layers", "PatternWidth", "PatternHeight", "PatternDepth", "Phases", "FrameAnimation", "Sprites" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.FrameAnimation), global::OpenTibiaUnity.Protobuf.Appearances001.FrameAnimation.Parser, new[]{ "Async", "LoopCount", "StartPhase", "FrameGroupDurations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration), global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration.Parser, new[]{ "Min", "Max" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum FrameGroupType
    {
        [pbr::OriginalName("FrameGroupType_Idle")] Idle = 0,
        [pbr::OriginalName("FrameGroupType_Walking")] Walking = 1,
    }

    #endregion

    #region Messages
    public sealed partial class Appearances : pb::IMessage<Appearances>
    {
        private static readonly pb::MessageParser<Appearances> _parser = new pb::MessageParser<Appearances>(() => new Appearances());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Appearances> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearances() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearances(Appearances other) : this() {
            objects_ = other.objects_.Clone();
            outfits_ = other.outfits_.Clone();
            effects_ = other.effects_.Clone();
            missles_ = other.missles_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearances Clone() {
            return new Appearances(this);
        }

        /// <summary>Field number for the "objects" field.</summary>
        public const int ObjectsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> _repeated_objects_codec
            = pb::FieldCodec.ForMessage(10, global::OpenTibiaUnity.Protobuf.Appearances001.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> objects_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> Objects {
            get { return objects_; }
        }

        /// <summary>Field number for the "outfits" field.</summary>
        public const int OutfitsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> _repeated_outfits_codec
            = pb::FieldCodec.ForMessage(18, global::OpenTibiaUnity.Protobuf.Appearances001.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> outfits_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> Outfits {
            get { return outfits_; }
        }

        /// <summary>Field number for the "effects" field.</summary>
        public const int EffectsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> _repeated_effects_codec
            = pb::FieldCodec.ForMessage(26, global::OpenTibiaUnity.Protobuf.Appearances001.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> effects_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> Effects {
            get { return effects_; }
        }

        /// <summary>Field number for the "missles" field.</summary>
        public const int MisslesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> _repeated_missles_codec
            = pb::FieldCodec.ForMessage(34, global::OpenTibiaUnity.Protobuf.Appearances001.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> missles_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.Appearance> Missles {
            get { return missles_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as Appearances);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Appearances other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (!objects_.Equals(other.objects_)) return false;
            if (!outfits_.Equals(other.outfits_)) return false;
            if (!effects_.Equals(other.effects_)) return false;
            if (!missles_.Equals(other.missles_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            hash ^= objects_.GetHashCode();
            hash ^= outfits_.GetHashCode();
            hash ^= effects_.GetHashCode();
            hash ^= missles_.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            objects_.WriteTo(output, _repeated_objects_codec);
            outfits_.WriteTo(output, _repeated_outfits_codec);
            effects_.WriteTo(output, _repeated_effects_codec);
            missles_.WriteTo(output, _repeated_missles_codec);
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            size += objects_.CalculateSize(_repeated_objects_codec);
            size += outfits_.CalculateSize(_repeated_outfits_codec);
            size += effects_.CalculateSize(_repeated_effects_codec);
            size += missles_.CalculateSize(_repeated_missles_codec);
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Appearances other) {
            if (other == null) {
                return;
            }
            objects_.Add(other.objects_);
            outfits_.Add(other.outfits_);
            effects_.Add(other.effects_);
            missles_.Add(other.missles_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10: {
                            objects_.AddEntriesFrom(input, _repeated_objects_codec);
                            break;
                        }
                    case 18: {
                            outfits_.AddEntriesFrom(input, _repeated_outfits_codec);
                            break;
                        }
                    case 26: {
                            effects_.AddEntriesFrom(input, _repeated_effects_codec);
                            break;
                        }
                    case 34: {
                            missles_.AddEntriesFrom(input, _repeated_missles_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Appearance : pb::IMessage<Appearance>
    {
        private static readonly pb::MessageParser<Appearance> _parser = new pb::MessageParser<Appearance>(() => new Appearance());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Appearance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearance() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearance(Appearance other) : this() {
            id_ = other.id_;
            flags_ = other.flags_ != null ? other.flags_.Clone() : null;
            frameGroups_ = other.frameGroups_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearance Clone() {
            return new Appearance(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
            get { return id_; }
            set {
                id_ = value;
            }
        }

        /// <summary>Field number for the "flags" field.</summary>
        public const int FlagsFieldNumber = 2;
        private global::OpenTibiaUnity.Protobuf.Appearances001.AppearanceFlags flags_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances001.AppearanceFlags Flags {
            get { return flags_; }
            set {
                flags_ = value;
            }
        }

        /// <summary>Field number for the "frameGroups" field.</summary>
        public const int FrameGroupsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup> _repeated_frameGroups_codec
            = pb::FieldCodec.ForMessage(26, global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup> frameGroups_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroup> FrameGroups {
            get { return frameGroups_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as Appearance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Appearance other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Id != other.Id) return false;
            if (!object.Equals(Flags, other.Flags)) return false;
            if (!frameGroups_.Equals(other.frameGroups_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (flags_ != null) hash ^= Flags.GetHashCode();
            hash ^= frameGroups_.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
            }
            if (flags_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Flags);
            }
            frameGroups_.WriteTo(output, _repeated_frameGroups_codec);
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (flags_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
            }
            size += frameGroups_.CalculateSize(_repeated_frameGroups_codec);
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Appearance other) {
            if (other == null) {
                return;
            }
            if (other.Id != 0) {
                Id = other.Id;
            }
            if (other.flags_ != null) {
                if (flags_ == null) {
                    flags_ = new global::OpenTibiaUnity.Protobuf.Appearances001.AppearanceFlags();
                }
                Flags.MergeFrom(other.Flags);
            }
            frameGroups_.Add(other.frameGroups_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 18: {
                            if (flags_ == null) {
                                flags_ = new global::OpenTibiaUnity.Protobuf.Appearances001.AppearanceFlags();
                            }
                            input.ReadMessage(flags_);
                            break;
                        }
                    case 26: {
                            frameGroups_.AddEntriesFrom(input, _repeated_frameGroups_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AppearanceFlags : pb::IMessage<AppearanceFlags>
    {
        private static readonly pb::MessageParser<AppearanceFlags> _parser = new pb::MessageParser<AppearanceFlags>(() => new AppearanceFlags());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlags> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlags() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlags(AppearanceFlags other) : this() {
            ground_ = other.ground_;
            groundBorder_ = other.groundBorder_;
            onBottom_ = other.onBottom_;
            onTop_ = other.onTop_;
            container_ = other.container_;
            stackable_ = other.stackable_;
            forceUse_ = other.forceUse_;
            multiUse_ = other.multiUse_;
            writable_ = other.writable_;
            writableOnce_ = other.writableOnce_;
            fluidContainer_ = other.fluidContainer_;
            splash_ = other.splash_;
            notWalkable_ = other.notWalkable_;
            notMoveable_ = other.notMoveable_;
            blockProjectile_ = other.blockProjectile_;
            notPathable_ = other.notPathable_;
            noMoveAnimation_ = other.noMoveAnimation_;
            pickupable_ = other.pickupable_;
            hangable_ = other.hangable_;
            hookSouth_ = other.hookSouth_;
            hookEast_ = other.hookEast_;
            rotateable_ = other.rotateable_;
            light_ = other.light_ != null ? other.light_.Clone() : null;
            dontHide_ = other.dontHide_;
            translucent_ = other.translucent_;
            displacement_ = other.displacement_ != null ? other.displacement_.Clone() : null;
            elevation_ = other.elevation_;
            lyingCorpse_ = other.lyingCorpse_;
            animateAlways_ = other.animateAlways_;
            minimapColor_ = other.minimapColor_;
            lensHelp_ = other.lensHelp_;
            fullGround_ = other.fullGround_;
            look_ = other.look_;
            cloth_ = other.cloth_;
            market_ = other.market_ != null ? other.market_.Clone() : null;
            defaultAction_ = other.defaultAction_;
            wrapable_ = other.wrapable_;
            unWrapable_ = other.unWrapable_;
            topEffect_ = other.topEffect_;
            usable_ = other.usable_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlags Clone() {
            return new AppearanceFlags(this);
        }

        /// <summary>Field number for the "ground" field.</summary>
        public const int GroundFieldNumber = 1;
        private uint ground_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Ground {
            get { return ground_; }
            set {
                ground_ = value;
            }
        }

        /// <summary>Field number for the "groundBorder" field.</summary>
        public const int GroundBorderFieldNumber = 2;
        private bool groundBorder_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool GroundBorder {
            get { return groundBorder_; }
            set {
                groundBorder_ = value;
            }
        }

        /// <summary>Field number for the "onBottom" field.</summary>
        public const int OnBottomFieldNumber = 3;
        private bool onBottom_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OnBottom {
            get { return onBottom_; }
            set {
                onBottom_ = value;
            }
        }

        /// <summary>Field number for the "onTop" field.</summary>
        public const int OnTopFieldNumber = 4;
        private bool onTop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OnTop {
            get { return onTop_; }
            set {
                onTop_ = value;
            }
        }

        /// <summary>Field number for the "container" field.</summary>
        public const int ContainerFieldNumber = 5;
        private bool container_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Container {
            get { return container_; }
            set {
                container_ = value;
            }
        }

        /// <summary>Field number for the "stackable" field.</summary>
        public const int StackableFieldNumber = 6;
        private bool stackable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Stackable {
            get { return stackable_; }
            set {
                stackable_ = value;
            }
        }

        /// <summary>Field number for the "forceUse" field.</summary>
        public const int ForceUseFieldNumber = 7;
        private bool forceUse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ForceUse {
            get { return forceUse_; }
            set {
                forceUse_ = value;
            }
        }

        /// <summary>Field number for the "multiUse" field.</summary>
        public const int MultiUseFieldNumber = 8;
        private bool multiUse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MultiUse {
            get { return multiUse_; }
            set {
                multiUse_ = value;
            }
        }

        /// <summary>Field number for the "writable" field.</summary>
        public const int WritableFieldNumber = 9;
        private uint writable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Writable {
            get { return writable_; }
            set {
                writable_ = value;
            }
        }

        /// <summary>Field number for the "writableOnce" field.</summary>
        public const int WritableOnceFieldNumber = 10;
        private uint writableOnce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WritableOnce {
            get { return writableOnce_; }
            set {
                writableOnce_ = value;
            }
        }

        /// <summary>Field number for the "fluidContainer" field.</summary>
        public const int FluidContainerFieldNumber = 11;
        private bool fluidContainer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FluidContainer {
            get { return fluidContainer_; }
            set {
                fluidContainer_ = value;
            }
        }

        /// <summary>Field number for the "splash" field.</summary>
        public const int SplashFieldNumber = 12;
        private bool splash_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Splash {
            get { return splash_; }
            set {
                splash_ = value;
            }
        }

        /// <summary>Field number for the "notWalkable" field.</summary>
        public const int NotWalkableFieldNumber = 13;
        private bool notWalkable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NotWalkable {
            get { return notWalkable_; }
            set {
                notWalkable_ = value;
            }
        }

        /// <summary>Field number for the "notMoveable" field.</summary>
        public const int NotMoveableFieldNumber = 14;
        private bool notMoveable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NotMoveable {
            get { return notMoveable_; }
            set {
                notMoveable_ = value;
            }
        }

        /// <summary>Field number for the "blockProjectile" field.</summary>
        public const int BlockProjectileFieldNumber = 15;
        private bool blockProjectile_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BlockProjectile {
            get { return blockProjectile_; }
            set {
                blockProjectile_ = value;
            }
        }

        /// <summary>Field number for the "notPathable" field.</summary>
        public const int NotPathableFieldNumber = 16;
        private bool notPathable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NotPathable {
            get { return notPathable_; }
            set {
                notPathable_ = value;
            }
        }

        /// <summary>Field number for the "noMoveAnimation" field.</summary>
        public const int NoMoveAnimationFieldNumber = 17;
        private bool noMoveAnimation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NoMoveAnimation {
            get { return noMoveAnimation_; }
            set {
                noMoveAnimation_ = value;
            }
        }

        /// <summary>Field number for the "pickupable" field.</summary>
        public const int PickupableFieldNumber = 18;
        private bool pickupable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Pickupable {
            get { return pickupable_; }
            set {
                pickupable_ = value;
            }
        }

        /// <summary>Field number for the "hangable" field.</summary>
        public const int HangableFieldNumber = 19;
        private bool hangable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Hangable {
            get { return hangable_; }
            set {
                hangable_ = value;
            }
        }

        /// <summary>Field number for the "hookSouth" field.</summary>
        public const int HookSouthFieldNumber = 20;
        private bool hookSouth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HookSouth {
            get { return hookSouth_; }
            set {
                hookSouth_ = value;
            }
        }

        /// <summary>Field number for the "hookEast" field.</summary>
        public const int HookEastFieldNumber = 21;
        private bool hookEast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HookEast {
            get { return hookEast_; }
            set {
                hookEast_ = value;
            }
        }

        /// <summary>Field number for the "rotateable" field.</summary>
        public const int RotateableFieldNumber = 22;
        private bool rotateable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Rotateable {
            get { return rotateable_; }
            set {
                rotateable_ = value;
            }
        }

        /// <summary>Field number for the "light" field.</summary>
        public const int LightFieldNumber = 23;
        private global::OpenTibiaUnity.Protobuf.Appearances001.LightInfo light_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances001.LightInfo Light {
            get { return light_; }
            set {
                light_ = value;
            }
        }

        /// <summary>Field number for the "dontHide" field.</summary>
        public const int DontHideFieldNumber = 24;
        private bool dontHide_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DontHide {
            get { return dontHide_; }
            set {
                dontHide_ = value;
            }
        }

        /// <summary>Field number for the "translucent" field.</summary>
        public const int TranslucentFieldNumber = 25;
        private bool translucent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Translucent {
            get { return translucent_; }
            set {
                translucent_ = value;
            }
        }

        /// <summary>Field number for the "displacement" field.</summary>
        public const int DisplacementFieldNumber = 26;
        private global::OpenTibiaUnity.Protobuf.Appearances001.Vector2 displacement_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances001.Vector2 Displacement {
            get { return displacement_; }
            set {
                displacement_ = value;
            }
        }

        /// <summary>Field number for the "elevation" field.</summary>
        public const int ElevationFieldNumber = 27;
        private uint elevation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Elevation {
            get { return elevation_; }
            set {
                elevation_ = value;
            }
        }

        /// <summary>Field number for the "lyingCorpse" field.</summary>
        public const int LyingCorpseFieldNumber = 28;
        private bool lyingCorpse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LyingCorpse {
            get { return lyingCorpse_; }
            set {
                lyingCorpse_ = value;
            }
        }

        /// <summary>Field number for the "animateAlways" field.</summary>
        public const int AnimateAlwaysFieldNumber = 29;
        private bool animateAlways_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AnimateAlways {
            get { return animateAlways_; }
            set {
                animateAlways_ = value;
            }
        }

        /// <summary>Field number for the "minimapColor" field.</summary>
        public const int MinimapColorFieldNumber = 30;
        private uint minimapColor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinimapColor {
            get { return minimapColor_; }
            set {
                minimapColor_ = value;
            }
        }

        /// <summary>Field number for the "lensHelp" field.</summary>
        public const int LensHelpFieldNumber = 31;
        private uint lensHelp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LensHelp {
            get { return lensHelp_; }
            set {
                lensHelp_ = value;
            }
        }

        /// <summary>Field number for the "fullGround" field.</summary>
        public const int FullGroundFieldNumber = 32;
        private bool fullGround_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FullGround {
            get { return fullGround_; }
            set {
                fullGround_ = value;
            }
        }

        /// <summary>Field number for the "Look" field.</summary>
        public const int LookFieldNumber = 33;
        private bool look_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Look {
            get { return look_; }
            set {
                look_ = value;
            }
        }

        /// <summary>Field number for the "cloth" field.</summary>
        public const int ClothFieldNumber = 34;
        private uint cloth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Cloth {
            get { return cloth_; }
            set {
                cloth_ = value;
            }
        }

        /// <summary>Field number for the "market" field.</summary>
        public const int MarketFieldNumber = 35;
        private global::OpenTibiaUnity.Protobuf.Appearances001.MarketInfo market_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances001.MarketInfo Market {
            get { return market_; }
            set {
                market_ = value;
            }
        }

        /// <summary>Field number for the "defaultAction" field.</summary>
        public const int DefaultActionFieldNumber = 36;
        private uint defaultAction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DefaultAction {
            get { return defaultAction_; }
            set {
                defaultAction_ = value;
            }
        }

        /// <summary>Field number for the "wrapable" field.</summary>
        public const int WrapableFieldNumber = 37;
        private bool wrapable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Wrapable {
            get { return wrapable_; }
            set {
                wrapable_ = value;
            }
        }

        /// <summary>Field number for the "unWrapable" field.</summary>
        public const int UnWrapableFieldNumber = 38;
        private bool unWrapable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnWrapable {
            get { return unWrapable_; }
            set {
                unWrapable_ = value;
            }
        }

        /// <summary>Field number for the "topEffect" field.</summary>
        public const int TopEffectFieldNumber = 39;
        private bool topEffect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TopEffect {
            get { return topEffect_; }
            set {
                topEffect_ = value;
            }
        }

        /// <summary>Field number for the "usable" field.</summary>
        public const int UsableFieldNumber = 40;
        private bool usable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Usable {
            get { return usable_; }
            set {
                usable_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlags);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlags other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Ground != other.Ground) return false;
            if (GroundBorder != other.GroundBorder) return false;
            if (OnBottom != other.OnBottom) return false;
            if (OnTop != other.OnTop) return false;
            if (Container != other.Container) return false;
            if (Stackable != other.Stackable) return false;
            if (ForceUse != other.ForceUse) return false;
            if (MultiUse != other.MultiUse) return false;
            if (Writable != other.Writable) return false;
            if (WritableOnce != other.WritableOnce) return false;
            if (FluidContainer != other.FluidContainer) return false;
            if (Splash != other.Splash) return false;
            if (NotWalkable != other.NotWalkable) return false;
            if (NotMoveable != other.NotMoveable) return false;
            if (BlockProjectile != other.BlockProjectile) return false;
            if (NotPathable != other.NotPathable) return false;
            if (NoMoveAnimation != other.NoMoveAnimation) return false;
            if (Pickupable != other.Pickupable) return false;
            if (Hangable != other.Hangable) return false;
            if (HookSouth != other.HookSouth) return false;
            if (HookEast != other.HookEast) return false;
            if (Rotateable != other.Rotateable) return false;
            if (!object.Equals(Light, other.Light)) return false;
            if (DontHide != other.DontHide) return false;
            if (Translucent != other.Translucent) return false;
            if (!object.Equals(Displacement, other.Displacement)) return false;
            if (Elevation != other.Elevation) return false;
            if (LyingCorpse != other.LyingCorpse) return false;
            if (AnimateAlways != other.AnimateAlways) return false;
            if (MinimapColor != other.MinimapColor) return false;
            if (LensHelp != other.LensHelp) return false;
            if (FullGround != other.FullGround) return false;
            if (Look != other.Look) return false;
            if (Cloth != other.Cloth) return false;
            if (!object.Equals(Market, other.Market)) return false;
            if (DefaultAction != other.DefaultAction) return false;
            if (Wrapable != other.Wrapable) return false;
            if (UnWrapable != other.UnWrapable) return false;
            if (TopEffect != other.TopEffect) return false;
            if (Usable != other.Usable) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Ground != 0) hash ^= Ground.GetHashCode();
            if (GroundBorder != false) hash ^= GroundBorder.GetHashCode();
            if (OnBottom != false) hash ^= OnBottom.GetHashCode();
            if (OnTop != false) hash ^= OnTop.GetHashCode();
            if (Container != false) hash ^= Container.GetHashCode();
            if (Stackable != false) hash ^= Stackable.GetHashCode();
            if (ForceUse != false) hash ^= ForceUse.GetHashCode();
            if (MultiUse != false) hash ^= MultiUse.GetHashCode();
            if (Writable != 0) hash ^= Writable.GetHashCode();
            if (WritableOnce != 0) hash ^= WritableOnce.GetHashCode();
            if (FluidContainer != false) hash ^= FluidContainer.GetHashCode();
            if (Splash != false) hash ^= Splash.GetHashCode();
            if (NotWalkable != false) hash ^= NotWalkable.GetHashCode();
            if (NotMoveable != false) hash ^= NotMoveable.GetHashCode();
            if (BlockProjectile != false) hash ^= BlockProjectile.GetHashCode();
            if (NotPathable != false) hash ^= NotPathable.GetHashCode();
            if (NoMoveAnimation != false) hash ^= NoMoveAnimation.GetHashCode();
            if (Pickupable != false) hash ^= Pickupable.GetHashCode();
            if (Hangable != false) hash ^= Hangable.GetHashCode();
            if (HookSouth != false) hash ^= HookSouth.GetHashCode();
            if (HookEast != false) hash ^= HookEast.GetHashCode();
            if (Rotateable != false) hash ^= Rotateable.GetHashCode();
            if (light_ != null) hash ^= Light.GetHashCode();
            if (DontHide != false) hash ^= DontHide.GetHashCode();
            if (Translucent != false) hash ^= Translucent.GetHashCode();
            if (displacement_ != null) hash ^= Displacement.GetHashCode();
            if (Elevation != 0) hash ^= Elevation.GetHashCode();
            if (LyingCorpse != false) hash ^= LyingCorpse.GetHashCode();
            if (AnimateAlways != false) hash ^= AnimateAlways.GetHashCode();
            if (MinimapColor != 0) hash ^= MinimapColor.GetHashCode();
            if (LensHelp != 0) hash ^= LensHelp.GetHashCode();
            if (FullGround != false) hash ^= FullGround.GetHashCode();
            if (Look != false) hash ^= Look.GetHashCode();
            if (Cloth != 0) hash ^= Cloth.GetHashCode();
            if (market_ != null) hash ^= Market.GetHashCode();
            if (DefaultAction != 0) hash ^= DefaultAction.GetHashCode();
            if (Wrapable != false) hash ^= Wrapable.GetHashCode();
            if (UnWrapable != false) hash ^= UnWrapable.GetHashCode();
            if (TopEffect != false) hash ^= TopEffect.GetHashCode();
            if (Usable != false) hash ^= Usable.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Ground != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Ground);
            }
            if (GroundBorder != false) {
                output.WriteRawTag(16);
                output.WriteBool(GroundBorder);
            }
            if (OnBottom != false) {
                output.WriteRawTag(24);
                output.WriteBool(OnBottom);
            }
            if (OnTop != false) {
                output.WriteRawTag(32);
                output.WriteBool(OnTop);
            }
            if (Container != false) {
                output.WriteRawTag(40);
                output.WriteBool(Container);
            }
            if (Stackable != false) {
                output.WriteRawTag(48);
                output.WriteBool(Stackable);
            }
            if (ForceUse != false) {
                output.WriteRawTag(56);
                output.WriteBool(ForceUse);
            }
            if (MultiUse != false) {
                output.WriteRawTag(64);
                output.WriteBool(MultiUse);
            }
            if (Writable != 0) {
                output.WriteRawTag(72);
                output.WriteUInt32(Writable);
            }
            if (WritableOnce != 0) {
                output.WriteRawTag(80);
                output.WriteUInt32(WritableOnce);
            }
            if (FluidContainer != false) {
                output.WriteRawTag(88);
                output.WriteBool(FluidContainer);
            }
            if (Splash != false) {
                output.WriteRawTag(96);
                output.WriteBool(Splash);
            }
            if (NotWalkable != false) {
                output.WriteRawTag(104);
                output.WriteBool(NotWalkable);
            }
            if (NotMoveable != false) {
                output.WriteRawTag(112);
                output.WriteBool(NotMoveable);
            }
            if (BlockProjectile != false) {
                output.WriteRawTag(120);
                output.WriteBool(BlockProjectile);
            }
            if (NotPathable != false) {
                output.WriteRawTag(128, 1);
                output.WriteBool(NotPathable);
            }
            if (NoMoveAnimation != false) {
                output.WriteRawTag(136, 1);
                output.WriteBool(NoMoveAnimation);
            }
            if (Pickupable != false) {
                output.WriteRawTag(144, 1);
                output.WriteBool(Pickupable);
            }
            if (Hangable != false) {
                output.WriteRawTag(152, 1);
                output.WriteBool(Hangable);
            }
            if (HookSouth != false) {
                output.WriteRawTag(160, 1);
                output.WriteBool(HookSouth);
            }
            if (HookEast != false) {
                output.WriteRawTag(168, 1);
                output.WriteBool(HookEast);
            }
            if (Rotateable != false) {
                output.WriteRawTag(176, 1);
                output.WriteBool(Rotateable);
            }
            if (light_ != null) {
                output.WriteRawTag(186, 1);
                output.WriteMessage(Light);
            }
            if (DontHide != false) {
                output.WriteRawTag(192, 1);
                output.WriteBool(DontHide);
            }
            if (Translucent != false) {
                output.WriteRawTag(200, 1);
                output.WriteBool(Translucent);
            }
            if (displacement_ != null) {
                output.WriteRawTag(210, 1);
                output.WriteMessage(Displacement);
            }
            if (Elevation != 0) {
                output.WriteRawTag(216, 1);
                output.WriteUInt32(Elevation);
            }
            if (LyingCorpse != false) {
                output.WriteRawTag(224, 1);
                output.WriteBool(LyingCorpse);
            }
            if (AnimateAlways != false) {
                output.WriteRawTag(232, 1);
                output.WriteBool(AnimateAlways);
            }
            if (MinimapColor != 0) {
                output.WriteRawTag(240, 1);
                output.WriteUInt32(MinimapColor);
            }
            if (LensHelp != 0) {
                output.WriteRawTag(248, 1);
                output.WriteUInt32(LensHelp);
            }
            if (FullGround != false) {
                output.WriteRawTag(128, 2);
                output.WriteBool(FullGround);
            }
            if (Look != false) {
                output.WriteRawTag(136, 2);
                output.WriteBool(Look);
            }
            if (Cloth != 0) {
                output.WriteRawTag(144, 2);
                output.WriteUInt32(Cloth);
            }
            if (market_ != null) {
                output.WriteRawTag(154, 2);
                output.WriteMessage(Market);
            }
            if (DefaultAction != 0) {
                output.WriteRawTag(160, 2);
                output.WriteUInt32(DefaultAction);
            }
            if (Wrapable != false) {
                output.WriteRawTag(168, 2);
                output.WriteBool(Wrapable);
            }
            if (UnWrapable != false) {
                output.WriteRawTag(176, 2);
                output.WriteBool(UnWrapable);
            }
            if (TopEffect != false) {
                output.WriteRawTag(184, 2);
                output.WriteBool(TopEffect);
            }
            if (Usable != false) {
                output.WriteRawTag(192, 2);
                output.WriteBool(Usable);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Ground != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ground);
            }
            if (GroundBorder != false) {
                size += 1 + 1;
            }
            if (OnBottom != false) {
                size += 1 + 1;
            }
            if (OnTop != false) {
                size += 1 + 1;
            }
            if (Container != false) {
                size += 1 + 1;
            }
            if (Stackable != false) {
                size += 1 + 1;
            }
            if (ForceUse != false) {
                size += 1 + 1;
            }
            if (MultiUse != false) {
                size += 1 + 1;
            }
            if (Writable != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Writable);
            }
            if (WritableOnce != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WritableOnce);
            }
            if (FluidContainer != false) {
                size += 1 + 1;
            }
            if (Splash != false) {
                size += 1 + 1;
            }
            if (NotWalkable != false) {
                size += 1 + 1;
            }
            if (NotMoveable != false) {
                size += 1 + 1;
            }
            if (BlockProjectile != false) {
                size += 1 + 1;
            }
            if (NotPathable != false) {
                size += 2 + 1;
            }
            if (NoMoveAnimation != false) {
                size += 2 + 1;
            }
            if (Pickupable != false) {
                size += 2 + 1;
            }
            if (Hangable != false) {
                size += 2 + 1;
            }
            if (HookSouth != false) {
                size += 2 + 1;
            }
            if (HookEast != false) {
                size += 2 + 1;
            }
            if (Rotateable != false) {
                size += 2 + 1;
            }
            if (light_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Light);
            }
            if (DontHide != false) {
                size += 2 + 1;
            }
            if (Translucent != false) {
                size += 2 + 1;
            }
            if (displacement_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Displacement);
            }
            if (Elevation != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Elevation);
            }
            if (LyingCorpse != false) {
                size += 2 + 1;
            }
            if (AnimateAlways != false) {
                size += 2 + 1;
            }
            if (MinimapColor != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinimapColor);
            }
            if (LensHelp != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LensHelp);
            }
            if (FullGround != false) {
                size += 2 + 1;
            }
            if (Look != false) {
                size += 2 + 1;
            }
            if (Cloth != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cloth);
            }
            if (market_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Market);
            }
            if (DefaultAction != 0) {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefaultAction);
            }
            if (Wrapable != false) {
                size += 2 + 1;
            }
            if (UnWrapable != false) {
                size += 2 + 1;
            }
            if (TopEffect != false) {
                size += 2 + 1;
            }
            if (Usable != false) {
                size += 2 + 1;
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlags other) {
            if (other == null) {
                return;
            }
            if (other.Ground != 0) {
                Ground = other.Ground;
            }
            if (other.GroundBorder != false) {
                GroundBorder = other.GroundBorder;
            }
            if (other.OnBottom != false) {
                OnBottom = other.OnBottom;
            }
            if (other.OnTop != false) {
                OnTop = other.OnTop;
            }
            if (other.Container != false) {
                Container = other.Container;
            }
            if (other.Stackable != false) {
                Stackable = other.Stackable;
            }
            if (other.ForceUse != false) {
                ForceUse = other.ForceUse;
            }
            if (other.MultiUse != false) {
                MultiUse = other.MultiUse;
            }
            if (other.Writable != 0) {
                Writable = other.Writable;
            }
            if (other.WritableOnce != 0) {
                WritableOnce = other.WritableOnce;
            }
            if (other.FluidContainer != false) {
                FluidContainer = other.FluidContainer;
            }
            if (other.Splash != false) {
                Splash = other.Splash;
            }
            if (other.NotWalkable != false) {
                NotWalkable = other.NotWalkable;
            }
            if (other.NotMoveable != false) {
                NotMoveable = other.NotMoveable;
            }
            if (other.BlockProjectile != false) {
                BlockProjectile = other.BlockProjectile;
            }
            if (other.NotPathable != false) {
                NotPathable = other.NotPathable;
            }
            if (other.NoMoveAnimation != false) {
                NoMoveAnimation = other.NoMoveAnimation;
            }
            if (other.Pickupable != false) {
                Pickupable = other.Pickupable;
            }
            if (other.Hangable != false) {
                Hangable = other.Hangable;
            }
            if (other.HookSouth != false) {
                HookSouth = other.HookSouth;
            }
            if (other.HookEast != false) {
                HookEast = other.HookEast;
            }
            if (other.Rotateable != false) {
                Rotateable = other.Rotateable;
            }
            if (other.light_ != null) {
                if (light_ == null) {
                    light_ = new global::OpenTibiaUnity.Protobuf.Appearances001.LightInfo();
                }
                Light.MergeFrom(other.Light);
            }
            if (other.DontHide != false) {
                DontHide = other.DontHide;
            }
            if (other.Translucent != false) {
                Translucent = other.Translucent;
            }
            if (other.displacement_ != null) {
                if (displacement_ == null) {
                    displacement_ = new global::OpenTibiaUnity.Protobuf.Appearances001.Vector2();
                }
                Displacement.MergeFrom(other.Displacement);
            }
            if (other.Elevation != 0) {
                Elevation = other.Elevation;
            }
            if (other.LyingCorpse != false) {
                LyingCorpse = other.LyingCorpse;
            }
            if (other.AnimateAlways != false) {
                AnimateAlways = other.AnimateAlways;
            }
            if (other.MinimapColor != 0) {
                MinimapColor = other.MinimapColor;
            }
            if (other.LensHelp != 0) {
                LensHelp = other.LensHelp;
            }
            if (other.FullGround != false) {
                FullGround = other.FullGround;
            }
            if (other.Look != false) {
                Look = other.Look;
            }
            if (other.Cloth != 0) {
                Cloth = other.Cloth;
            }
            if (other.market_ != null) {
                if (market_ == null) {
                    market_ = new global::OpenTibiaUnity.Protobuf.Appearances001.MarketInfo();
                }
                Market.MergeFrom(other.Market);
            }
            if (other.DefaultAction != 0) {
                DefaultAction = other.DefaultAction;
            }
            if (other.Wrapable != false) {
                Wrapable = other.Wrapable;
            }
            if (other.UnWrapable != false) {
                UnWrapable = other.UnWrapable;
            }
            if (other.TopEffect != false) {
                TopEffect = other.TopEffect;
            }
            if (other.Usable != false) {
                Usable = other.Usable;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            Ground = input.ReadUInt32();
                            break;
                        }
                    case 16: {
                            GroundBorder = input.ReadBool();
                            break;
                        }
                    case 24: {
                            OnBottom = input.ReadBool();
                            break;
                        }
                    case 32: {
                            OnTop = input.ReadBool();
                            break;
                        }
                    case 40: {
                            Container = input.ReadBool();
                            break;
                        }
                    case 48: {
                            Stackable = input.ReadBool();
                            break;
                        }
                    case 56: {
                            ForceUse = input.ReadBool();
                            break;
                        }
                    case 64: {
                            MultiUse = input.ReadBool();
                            break;
                        }
                    case 72: {
                            Writable = input.ReadUInt32();
                            break;
                        }
                    case 80: {
                            WritableOnce = input.ReadUInt32();
                            break;
                        }
                    case 88: {
                            FluidContainer = input.ReadBool();
                            break;
                        }
                    case 96: {
                            Splash = input.ReadBool();
                            break;
                        }
                    case 104: {
                            NotWalkable = input.ReadBool();
                            break;
                        }
                    case 112: {
                            NotMoveable = input.ReadBool();
                            break;
                        }
                    case 120: {
                            BlockProjectile = input.ReadBool();
                            break;
                        }
                    case 128: {
                            NotPathable = input.ReadBool();
                            break;
                        }
                    case 136: {
                            NoMoveAnimation = input.ReadBool();
                            break;
                        }
                    case 144: {
                            Pickupable = input.ReadBool();
                            break;
                        }
                    case 152: {
                            Hangable = input.ReadBool();
                            break;
                        }
                    case 160: {
                            HookSouth = input.ReadBool();
                            break;
                        }
                    case 168: {
                            HookEast = input.ReadBool();
                            break;
                        }
                    case 176: {
                            Rotateable = input.ReadBool();
                            break;
                        }
                    case 186: {
                            if (light_ == null) {
                                light_ = new global::OpenTibiaUnity.Protobuf.Appearances001.LightInfo();
                            }
                            input.ReadMessage(light_);
                            break;
                        }
                    case 192: {
                            DontHide = input.ReadBool();
                            break;
                        }
                    case 200: {
                            Translucent = input.ReadBool();
                            break;
                        }
                    case 210: {
                            if (displacement_ == null) {
                                displacement_ = new global::OpenTibiaUnity.Protobuf.Appearances001.Vector2();
                            }
                            input.ReadMessage(displacement_);
                            break;
                        }
                    case 216: {
                            Elevation = input.ReadUInt32();
                            break;
                        }
                    case 224: {
                            LyingCorpse = input.ReadBool();
                            break;
                        }
                    case 232: {
                            AnimateAlways = input.ReadBool();
                            break;
                        }
                    case 240: {
                            MinimapColor = input.ReadUInt32();
                            break;
                        }
                    case 248: {
                            LensHelp = input.ReadUInt32();
                            break;
                        }
                    case 256: {
                            FullGround = input.ReadBool();
                            break;
                        }
                    case 264: {
                            Look = input.ReadBool();
                            break;
                        }
                    case 272: {
                            Cloth = input.ReadUInt32();
                            break;
                        }
                    case 282: {
                            if (market_ == null) {
                                market_ = new global::OpenTibiaUnity.Protobuf.Appearances001.MarketInfo();
                            }
                            input.ReadMessage(market_);
                            break;
                        }
                    case 288: {
                            DefaultAction = input.ReadUInt32();
                            break;
                        }
                    case 296: {
                            Wrapable = input.ReadBool();
                            break;
                        }
                    case 304: {
                            UnWrapable = input.ReadBool();
                            break;
                        }
                    case 312: {
                            TopEffect = input.ReadBool();
                            break;
                        }
                    case 320: {
                            Usable = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class LightInfo : pb::IMessage<LightInfo>
    {
        private static readonly pb::MessageParser<LightInfo> _parser = new pb::MessageParser<LightInfo>(() => new LightInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LightInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LightInfo() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LightInfo(LightInfo other) : this() {
            intensity_ = other.intensity_;
            color_ = other.color_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LightInfo Clone() {
            return new LightInfo(this);
        }

        /// <summary>Field number for the "intensity" field.</summary>
        public const int IntensityFieldNumber = 1;
        private uint intensity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Intensity {
            get { return intensity_; }
            set {
                intensity_ = value;
            }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 2;
        private uint color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Color {
            get { return color_; }
            set {
                color_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as LightInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LightInfo other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Intensity != other.Intensity) return false;
            if (Color != other.Color) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Intensity != 0) hash ^= Intensity.GetHashCode();
            if (Color != 0) hash ^= Color.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Intensity != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Intensity);
            }
            if (Color != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Color);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Intensity != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Intensity);
            }
            if (Color != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LightInfo other) {
            if (other == null) {
                return;
            }
            if (other.Intensity != 0) {
                Intensity = other.Intensity;
            }
            if (other.Color != 0) {
                Color = other.Color;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            Intensity = input.ReadUInt32();
                            break;
                        }
                    case 16: {
                            Color = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Vector2 : pb::IMessage<Vector2>
    {
        private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => new Vector2());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector2() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector2(Vector2 other) : this() {
            x_ = other.x_;
            y_ = other.y_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector2 Clone() {
            return new Vector2(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private uint x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint X {
            get { return x_; }
            set {
                x_ = value;
            }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private uint y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Y {
            get { return y_; }
            set {
                y_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as Vector2);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Vector2 other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (X != other.X) return false;
            if (Y != other.Y) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (X != 0) hash ^= X.GetHashCode();
            if (Y != 0) hash ^= Y.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (X != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(X);
            }
            if (Y != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Y);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
            }
            if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Vector2 other) {
            if (other == null) {
                return;
            }
            if (other.X != 0) {
                X = other.X;
            }
            if (other.Y != 0) {
                Y = other.Y;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            X = input.ReadUInt32();
                            break;
                        }
                    case 16: {
                            Y = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MarketInfo : pb::IMessage<MarketInfo>
    {
        private static readonly pb::MessageParser<MarketInfo> _parser = new pb::MessageParser<MarketInfo>(() => new MarketInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MarketInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MarketInfo() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MarketInfo(MarketInfo other) : this() {
            category_ = other.category_;
            tradeAs_ = other.tradeAs_;
            showAs_ = other.showAs_;
            name_ = other.name_;
            restrictVocation_ = other.restrictVocation_;
            requiredLevel_ = other.requiredLevel_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MarketInfo Clone() {
            return new MarketInfo(this);
        }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 1;
        private uint category_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Category {
            get { return category_; }
            set {
                category_ = value;
            }
        }

        /// <summary>Field number for the "tradeAs" field.</summary>
        public const int TradeAsFieldNumber = 2;
        private uint tradeAs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TradeAs {
            get { return tradeAs_; }
            set {
                tradeAs_ = value;
            }
        }

        /// <summary>Field number for the "showAs" field.</summary>
        public const int ShowAsFieldNumber = 3;
        private uint showAs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShowAs {
            get { return showAs_; }
            set {
                showAs_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 4;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
            get { return name_; }
            set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "restrictVocation" field.</summary>
        public const int RestrictVocationFieldNumber = 5;
        private uint restrictVocation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RestrictVocation {
            get { return restrictVocation_; }
            set {
                restrictVocation_ = value;
            }
        }

        /// <summary>Field number for the "requiredLevel" field.</summary>
        public const int RequiredLevelFieldNumber = 6;
        private uint requiredLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RequiredLevel {
            get { return requiredLevel_; }
            set {
                requiredLevel_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as MarketInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MarketInfo other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Category != other.Category) return false;
            if (TradeAs != other.TradeAs) return false;
            if (ShowAs != other.ShowAs) return false;
            if (Name != other.Name) return false;
            if (RestrictVocation != other.RestrictVocation) return false;
            if (RequiredLevel != other.RequiredLevel) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Category != 0) hash ^= Category.GetHashCode();
            if (TradeAs != 0) hash ^= TradeAs.GetHashCode();
            if (ShowAs != 0) hash ^= ShowAs.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (RestrictVocation != 0) hash ^= RestrictVocation.GetHashCode();
            if (RequiredLevel != 0) hash ^= RequiredLevel.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Category != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Category);
            }
            if (TradeAs != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(TradeAs);
            }
            if (ShowAs != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(ShowAs);
            }
            if (Name.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(Name);
            }
            if (RestrictVocation != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(RestrictVocation);
            }
            if (RequiredLevel != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(RequiredLevel);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Category != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Category);
            }
            if (TradeAs != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeAs);
            }
            if (ShowAs != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowAs);
            }
            if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (RestrictVocation != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RestrictVocation);
            }
            if (RequiredLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequiredLevel);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MarketInfo other) {
            if (other == null) {
                return;
            }
            if (other.Category != 0) {
                Category = other.Category;
            }
            if (other.TradeAs != 0) {
                TradeAs = other.TradeAs;
            }
            if (other.ShowAs != 0) {
                ShowAs = other.ShowAs;
            }
            if (other.Name.Length != 0) {
                Name = other.Name;
            }
            if (other.RestrictVocation != 0) {
                RestrictVocation = other.RestrictVocation;
            }
            if (other.RequiredLevel != 0) {
                RequiredLevel = other.RequiredLevel;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            Category = input.ReadUInt32();
                            break;
                        }
                    case 16: {
                            TradeAs = input.ReadUInt32();
                            break;
                        }
                    case 24: {
                            ShowAs = input.ReadUInt32();
                            break;
                        }
                    case 34: {
                            Name = input.ReadString();
                            break;
                        }
                    case 40: {
                            RestrictVocation = input.ReadUInt32();
                            break;
                        }
                    case 48: {
                            RequiredLevel = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FrameGroup : pb::IMessage<FrameGroup>
    {
        private static readonly pb::MessageParser<FrameGroup> _parser = new pb::MessageParser<FrameGroup>(() => new FrameGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FrameGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroup() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroup(FrameGroup other) : this() {
            type_ = other.type_;
            width_ = other.width_;
            height_ = other.height_;
            exactSize_ = other.exactSize_;
            layers_ = other.layers_;
            patternWidth_ = other.patternWidth_;
            patternHeight_ = other.patternHeight_;
            patternDepth_ = other.patternDepth_;
            phases_ = other.phases_;
            frameAnimation_ = other.frameAnimation_ != null ? other.frameAnimation_.Clone() : null;
            sprites_ = other.sprites_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroup Clone() {
            return new FrameGroup(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupType Type {
            get { return type_; }
            set {
                type_ = value;
            }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 2;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
            get { return width_; }
            set {
                width_ = value;
            }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 3;
        private uint height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Height {
            get { return height_; }
            set {
                height_ = value;
            }
        }

        /// <summary>Field number for the "exactSize" field.</summary>
        public const int ExactSizeFieldNumber = 4;
        private uint exactSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExactSize {
            get { return exactSize_; }
            set {
                exactSize_ = value;
            }
        }

        /// <summary>Field number for the "layers" field.</summary>
        public const int LayersFieldNumber = 5;
        private uint layers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Layers {
            get { return layers_; }
            set {
                layers_ = value;
            }
        }

        /// <summary>Field number for the "patternWidth" field.</summary>
        public const int PatternWidthFieldNumber = 6;
        private uint patternWidth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PatternWidth {
            get { return patternWidth_; }
            set {
                patternWidth_ = value;
            }
        }

        /// <summary>Field number for the "patternHeight" field.</summary>
        public const int PatternHeightFieldNumber = 7;
        private uint patternHeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PatternHeight {
            get { return patternHeight_; }
            set {
                patternHeight_ = value;
            }
        }

        /// <summary>Field number for the "patternDepth" field.</summary>
        public const int PatternDepthFieldNumber = 8;
        private uint patternDepth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PatternDepth {
            get { return patternDepth_; }
            set {
                patternDepth_ = value;
            }
        }

        /// <summary>Field number for the "phases" field.</summary>
        public const int PhasesFieldNumber = 9;
        private uint phases_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Phases {
            get { return phases_; }
            set {
                phases_ = value;
            }
        }

        /// <summary>Field number for the "frameAnimation" field.</summary>
        public const int FrameAnimationFieldNumber = 10;
        private global::OpenTibiaUnity.Protobuf.Appearances001.FrameAnimation frameAnimation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances001.FrameAnimation FrameAnimation {
            get { return frameAnimation_; }
            set {
                frameAnimation_ = value;
            }
        }

        /// <summary>Field number for the "sprites" field.</summary>
        public const int SpritesFieldNumber = 11;
        private static readonly pb::FieldCodec<uint> _repeated_sprites_codec
            = pb::FieldCodec.ForUInt32(90);
        private readonly pbc::RepeatedField<uint> sprites_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Sprites {
            get { return sprites_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as FrameGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FrameGroup other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Type != other.Type) return false;
            if (Width != other.Width) return false;
            if (Height != other.Height) return false;
            if (ExactSize != other.ExactSize) return false;
            if (Layers != other.Layers) return false;
            if (PatternWidth != other.PatternWidth) return false;
            if (PatternHeight != other.PatternHeight) return false;
            if (PatternDepth != other.PatternDepth) return false;
            if (Phases != other.Phases) return false;
            if (!object.Equals(FrameAnimation, other.FrameAnimation)) return false;
            if (!sprites_.Equals(other.sprites_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Width != 0) hash ^= Width.GetHashCode();
            if (Height != 0) hash ^= Height.GetHashCode();
            if (ExactSize != 0) hash ^= ExactSize.GetHashCode();
            if (Layers != 0) hash ^= Layers.GetHashCode();
            if (PatternWidth != 0) hash ^= PatternWidth.GetHashCode();
            if (PatternHeight != 0) hash ^= PatternHeight.GetHashCode();
            if (PatternDepth != 0) hash ^= PatternDepth.GetHashCode();
            if (Phases != 0) hash ^= Phases.GetHashCode();
            if (frameAnimation_ != null) hash ^= FrameAnimation.GetHashCode();
            hash ^= sprites_.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Width != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Width);
            }
            if (Height != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Height);
            }
            if (ExactSize != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(ExactSize);
            }
            if (Layers != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(Layers);
            }
            if (PatternWidth != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(PatternWidth);
            }
            if (PatternHeight != 0) {
                output.WriteRawTag(56);
                output.WriteUInt32(PatternHeight);
            }
            if (PatternDepth != 0) {
                output.WriteRawTag(64);
                output.WriteUInt32(PatternDepth);
            }
            if (Phases != 0) {
                output.WriteRawTag(72);
                output.WriteUInt32(Phases);
            }
            if (frameAnimation_ != null) {
                output.WriteRawTag(82);
                output.WriteMessage(FrameAnimation);
            }
            sprites_.WriteTo(output, _repeated_sprites_codec);
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Width != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
            }
            if (Height != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
            }
            if (ExactSize != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExactSize);
            }
            if (Layers != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layers);
            }
            if (PatternWidth != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternWidth);
            }
            if (PatternHeight != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternHeight);
            }
            if (PatternDepth != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternDepth);
            }
            if (Phases != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Phases);
            }
            if (frameAnimation_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameAnimation);
            }
            size += sprites_.CalculateSize(_repeated_sprites_codec);
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FrameGroup other) {
            if (other == null) {
                return;
            }
            if (other.Type != 0) {
                Type = other.Type;
            }
            if (other.Width != 0) {
                Width = other.Width;
            }
            if (other.Height != 0) {
                Height = other.Height;
            }
            if (other.ExactSize != 0) {
                ExactSize = other.ExactSize;
            }
            if (other.Layers != 0) {
                Layers = other.Layers;
            }
            if (other.PatternWidth != 0) {
                PatternWidth = other.PatternWidth;
            }
            if (other.PatternHeight != 0) {
                PatternHeight = other.PatternHeight;
            }
            if (other.PatternDepth != 0) {
                PatternDepth = other.PatternDepth;
            }
            if (other.Phases != 0) {
                Phases = other.Phases;
            }
            if (other.frameAnimation_ != null) {
                if (frameAnimation_ == null) {
                    frameAnimation_ = new global::OpenTibiaUnity.Protobuf.Appearances001.FrameAnimation();
                }
                FrameAnimation.MergeFrom(other.FrameAnimation);
            }
            sprites_.Add(other.sprites_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            type_ = (global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupType)input.ReadEnum();
                            break;
                        }
                    case 16: {
                            Width = input.ReadUInt32();
                            break;
                        }
                    case 24: {
                            Height = input.ReadUInt32();
                            break;
                        }
                    case 32: {
                            ExactSize = input.ReadUInt32();
                            break;
                        }
                    case 40: {
                            Layers = input.ReadUInt32();
                            break;
                        }
                    case 48: {
                            PatternWidth = input.ReadUInt32();
                            break;
                        }
                    case 56: {
                            PatternHeight = input.ReadUInt32();
                            break;
                        }
                    case 64: {
                            PatternDepth = input.ReadUInt32();
                            break;
                        }
                    case 72: {
                            Phases = input.ReadUInt32();
                            break;
                        }
                    case 82: {
                            if (frameAnimation_ == null) {
                                frameAnimation_ = new global::OpenTibiaUnity.Protobuf.Appearances001.FrameAnimation();
                            }
                            input.ReadMessage(frameAnimation_);
                            break;
                        }
                    case 90:
                    case 88: {
                            sprites_.AddEntriesFrom(input, _repeated_sprites_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FrameAnimation : pb::IMessage<FrameAnimation>
    {
        private static readonly pb::MessageParser<FrameAnimation> _parser = new pb::MessageParser<FrameAnimation>(() => new FrameAnimation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FrameAnimation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameAnimation() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameAnimation(FrameAnimation other) : this() {
            async_ = other.async_;
            loopCount_ = other.loopCount_;
            startPhase_ = other.startPhase_;
            frameGroupDurations_ = other.frameGroupDurations_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameAnimation Clone() {
            return new FrameAnimation(this);
        }

        /// <summary>Field number for the "async" field.</summary>
        public const int AsyncFieldNumber = 1;
        private bool async_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Async {
            get { return async_; }
            set {
                async_ = value;
            }
        }

        /// <summary>Field number for the "loopCount" field.</summary>
        public const int LoopCountFieldNumber = 2;
        private int loopCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LoopCount {
            get { return loopCount_; }
            set {
                loopCount_ = value;
            }
        }

        /// <summary>Field number for the "startPhase" field.</summary>
        public const int StartPhaseFieldNumber = 3;
        private int startPhase_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartPhase {
            get { return startPhase_; }
            set {
                startPhase_ = value;
            }
        }

        /// <summary>Field number for the "frameGroupDurations" field.</summary>
        public const int FrameGroupDurationsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration> _repeated_frameGroupDurations_codec
            = pb::FieldCodec.ForMessage(34, global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration> frameGroupDurations_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances001.FrameGroupDuration> FrameGroupDurations {
            get { return frameGroupDurations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as FrameAnimation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FrameAnimation other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Async != other.Async) return false;
            if (LoopCount != other.LoopCount) return false;
            if (StartPhase != other.StartPhase) return false;
            if (!frameGroupDurations_.Equals(other.frameGroupDurations_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Async != false) hash ^= Async.GetHashCode();
            if (LoopCount != 0) hash ^= LoopCount.GetHashCode();
            if (StartPhase != 0) hash ^= StartPhase.GetHashCode();
            hash ^= frameGroupDurations_.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Async != false) {
                output.WriteRawTag(8);
                output.WriteBool(Async);
            }
            if (LoopCount != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(LoopCount);
            }
            if (StartPhase != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(StartPhase);
            }
            frameGroupDurations_.WriteTo(output, _repeated_frameGroupDurations_codec);
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Async != false) {
                size += 1 + 1;
            }
            if (LoopCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoopCount);
            }
            if (StartPhase != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPhase);
            }
            size += frameGroupDurations_.CalculateSize(_repeated_frameGroupDurations_codec);
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FrameAnimation other) {
            if (other == null) {
                return;
            }
            if (other.Async != false) {
                Async = other.Async;
            }
            if (other.LoopCount != 0) {
                LoopCount = other.LoopCount;
            }
            if (other.StartPhase != 0) {
                StartPhase = other.StartPhase;
            }
            frameGroupDurations_.Add(other.frameGroupDurations_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            Async = input.ReadBool();
                            break;
                        }
                    case 16: {
                            LoopCount = input.ReadInt32();
                            break;
                        }
                    case 24: {
                            StartPhase = input.ReadInt32();
                            break;
                        }
                    case 34: {
                            frameGroupDurations_.AddEntriesFrom(input, _repeated_frameGroupDurations_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class FrameGroupDuration : pb::IMessage<FrameGroupDuration>
    {
        private static readonly pb::MessageParser<FrameGroupDuration> _parser = new pb::MessageParser<FrameGroupDuration>(() => new FrameGroupDuration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FrameGroupDuration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances001.OpentibiaReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroupDuration() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroupDuration(FrameGroupDuration other) : this() {
            min_ = other.min_;
            max_ = other.max_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroupDuration Clone() {
            return new FrameGroupDuration(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private uint min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Min {
            get { return min_; }
            set {
                min_ = value;
            }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private uint max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Max {
            get { return max_; }
            set {
                max_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as FrameGroupDuration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FrameGroupDuration other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Min != other.Min) return false;
            if (Max != other.Max) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Min != 0) hash ^= Min.GetHashCode();
            if (Max != 0) hash ^= Max.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Min != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Min);
            }
            if (Max != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Max);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Min != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
            }
            if (Max != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FrameGroupDuration other) {
            if (other == null) {
                return;
            }
            if (other.Min != 0) {
                Min = other.Min;
            }
            if (other.Max != 0) {
                Max = other.Max;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                            Min = input.ReadUInt32();
                            break;
                        }
                    case 16: {
                            Max = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
