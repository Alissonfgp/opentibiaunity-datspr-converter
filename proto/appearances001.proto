syntax = "proto3";

package OpenTibiaUnity.Proto.Appearances;

enum HookType {
	South = 0;
	East = 1;
}

enum PlayerAction {
	None = 0;
	Look = 1;
	Use = 2;
	Open = 3;
	AutowalkHighlight = 4;
}

enum FrameGroupType {
	FrameGroupType_Idle = 0;
	FrameGroupType_Walking = 1;
}

message Appearances {
	repeated Appearance objects = 1;
	repeated Appearance outfits = 2;
	repeated Appearance effects = 3;
	repeated Appearance missles = 4;
}

message Appearance {
	uint32 id = 1;
	AppearanceFlags flags = 2;
	repeated FrameGroup frameGroups = 3;
}

message AppearanceFlags {
	Ground ground = 1;
	bool groundBorder = 2;
	bool bottom = 3;
	bool top = 4;
	bool container = 5;
	bool stackable = 6;
	bool use = 7;
	bool forceUse = 8;
	bool multiUse = 9;
	Writable writable = 10;
	Writable writableOnce = 11;
	bool fluidContainer = 12;
	bool splash = 13;
	bool unpassable = 14;
	bool unmoveable = 15;
	bool unsight = 16;
	bool blockPath = 17;
	bool noMoveAnimation = 18;
	bool pickupable = 19;
	bool hangable = 20;
	Hook hook = 21;
	bool rotateable = 22;
	LightInfo light = 23;
	bool dontHide = 24;
	bool translucent = 25;
	Displacement displacement = 26;
	Elevation elevation = 27;
	bool lyingCorpse = 28;
	bool animateAlways = 29;
	MiniMap minimap = 30;
	LensHelp lensHelp = 31;
	bool fullGround = 32;
	bool Look = 33;
	Clothes cloth = 34;
	MarketInfo market = 35;
	DefaultAction defaultAction = 36;
	bool wrapable = 37;
	bool unWrapable = 38;
	bool topEffect = 39;
}

message Ground {
	uint32 speed = 1;
}

message Writable {
	uint32 length = 1;
}

message Hook {
	HookType type = 1;
}

message LightInfo {
	uint32 intensity = 1;
	uint32 color = 2;
}

message MiniMap {
	uint32 color = 1;
}

message Displacement {
	uint32 x = 1;
	uint32 y = 2;
}

message Elevation {
	uint32 elevation = 1;
}

message LensHelp {
	uint32 id = 1;
}

message Clothes {
	uint32 slot = 1;
}

message MarketInfo {
	uint32 category = 1;
	uint32 tradeAs = 2;
	uint32 showAs = 3;
	string name = 4;
	uint32 restrictVocation = 5;
	uint32 requiredLevel = 6;
}

message DefaultAction {
	PlayerAction action = 1;
}

message FrameGroup {
	FrameGroupType type = 1;
	uint32 width = 2;
	uint32 height = 3;
	uint32 exactSize = 4;
	uint32 layers = 5;
	uint32 patternWidth = 6;
	uint32 patternHeight = 7;
	uint32 patternDepth = 8;
	uint32 phases = 9;
	FrameAnimation frameAnimation = 10;
	repeated uint32 sprites = 11;
}

message FrameAnimation {
	bool async = 1;
	int32 loopCount = 2;
	int32 startPhase = 3;
	repeated FrameGroupDuration frameGroupDurations = 4;
}

message FrameGroupDuration {
	uint32 min = 1;
	uint32 max = 2;
}